var (
    events = metrics.New(custom.StackDisplay(os.Stdout))

    config = mdb.Config{
        Mode: mgo.Monotonic,
        DB: os.Getenv("{{.Struct.Package}}_MONGO_TEST_DB"),
        Host: os.Getenv("{{.Struct.Package}}_MONGO_TEST_HOST"),
        User: os.Getenv("{{.Struct.Package}}_MONGO_TEST_USER"),
        AuthDB: os.Getenv("{{.Struct.Package}}_MONGO_TEST_AUTHDB"),
        Password: os.Getenv("{{.Struct.Package}}_MONGO_TEST_PASSWORD"),
    }

    testCol = "{{lower .Struct.Object.Name.Name}}_test_collection"
)

// TestGet{{.Struct.Object.Name}} validates the retrieval of a {{.Struct.Object.Name}}
// record from a mongodb.
func TestGet{{.Struct.Object.Name}}(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
    defer cancel()

    elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
    if err != nil {
        tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
    }
    tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    defer api.Delete(ctx, elem.PublicID)

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

    _, err = api.Get(ctx, elem.PublicID)
    if err != nil {
        tests.Failed("Successfully retrieved stored record for {{.Struct.Object.Name}} from db: %+q.", err)
    }
    tests.Passed("Successfully retrieved stored record for {{.Struct.Object.Name}} from db.")
}

// TestGetAll{{.Struct.Object.Name}} validates the retrieval of all {{.Struct.Object.Name}}
// record from a mongodb.
func TestGetAll{{.Struct.Object.Name}}(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    defer api.Delete(ctx, elem.PublicID)

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

    records, _, err := api.GetAll(ctx, "asc", "public_id", -1, -1)
    if err != nil {
        tests.Failed("Successfully retrieved all records for {{.Struct.Object.Name}} from db: %+q.", err)
    }
    tests.Passed("Successfully retrieved all records for {{.Struct.Object.Name}} from db.")

    if len(records) == 0 {
        tests.Failed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
    }
    tests.Passed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
}

// TestGetAll{{.Struct.Object.Name}}OrderBy validates the retrieval of all {{.Struct.Object.Name}}
// record from a mongodb.
func TestGetAll{{.Struct.Object.Name}}ByOrder(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    defer api.Delete(ctx, elem.PublicID)

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

    records, err := api.GetAllByOrder(ctx, "asc", "public_id")
    if err != nil {
        tests.Failed("Successfully retrieved all records for {{.Struct.Object.Name}} from db: %+q.", err)
    }
    tests.Passed("Successfully retrieved all records for {{.Struct.Object.Name}} from db.")

    if len(records) == 0 {
        tests.Failed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
    }
    tests.Passed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
}

// Test{{.Struct.Object.Name}}Create validates the creation of a {{.Struct.Object.Name}}
// record with a mongodb.
func Test{{.Struct.Object.Name}}Create(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    defer api.Delete(ctx, elem.PublicID)

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")
}

// Test{{.Struct.Object.Name}}Update validates the update of a {{.Struct.Object.Name}}
// record with a mongodb.
func Test{{.Struct.Object.Name}}Update(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    defer api.Delete(ctx, elem.PublicID)

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

    elem2, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	elem2.PublicID = elem.PublicID

    if err := api.Update(ctx, elem2.PublicID, elem2); err != nil {
        tests.Failed("Successfully updated record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully updated record for {{.Struct.Object.Name}} into db.")
}

// Test{{.Struct.Object.Name}}Delete validates the removal of a {{.Struct.Object.Name}}
// record from a mongodb.
func Test{{.Struct.Object.Name}}Delete(t *testing.T){
    api := mdb.New(testCol, events, mdb.NewMongoDB(config))

    ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

    if err := api.Create(ctx, elem); err != nil {
        tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

    if err := api.Delete(ctx, elem.PublicID); err != nil {
        tests.Failed("Successfully removed record for {{.Struct.Object.Name}} into db: %+q.", err)
    }
    tests.Passed("Successfully removed record for {{.Struct.Object.Name}} into db.")

    if _, err = api.Get(ctx, elem.PublicID); err == nil {
        tests.Failed("Successfully failed to get deleted record for {{.Struct.Object.Name}} into db.")
    }
    tests.Passed("Successfully failed to get deleted record for {{.Struct.Object.Name}} into db.")
}
